name: Publish Docker image

on:
  push:

jobs:
  # Builds a new container image, and pushes it on every commit to the repository
  # Also pushes a tag called "latest" to track the latest commit
  # Push both latest and with tag based on commit id. this way i can use "latest" if i want the image pulled, but have less control than if i use unique ID on each tag.
  build_docker_image:
    name: "Push Docker image to ECR"
    runs-on: ubuntu-latest


    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Build and push Docker image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 244530008913.dkr.ecr.eu-west-1.amazonaws.com

      - name: Build image
        run: docker build . -t ppe

      - name: Push image to ecr
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        run: |
          rev=$(git rev-parse --short HEAD)
          docker tag ppe 244530008913.dkr.ecr.eu-west-1.amazonaws.com/2016-repo-sensur:$rev
          docker tag ppe 244530008913.dkr.ecr.eu-west-1.amazonaws.com/2016-repo-sensur:latest
          docker push 244530008913.dkr.ecr.eu-west-1.amazonaws.com/2016-repo-sensur:$rev
          docker push 244530008913.dkr.ecr.eu-west-1.amazonaws.com/2016-repo-sensur:latest

  create_app_runner_and_cloudwatch_dashboard:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: "Creating AppRunner and cloudwatch dashboard"
    needs: build_docker_image
    runs-on: ubuntu-latest
    env:
      DIRECTORY: ./infra
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-1
      ECR_REPO: 2016-repo-sensur
      IMAGE_TAG: latest
      PREFIX: ${{secrets.CANDIDATE_NUMBER}}
      EMAIL: ${{secrets.EMAIL_ADDRESS}}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ${{env.DIRECTORY}}
        id: init
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{env.DIRECTORY}}
        id: plan

        run: terraform plan -var="alarm_email=$EMAIL" -var="prefix=$PREFIX" -var="ecrRepo=$ECR_REPO" -var="imageTag=$IMAGE_TAG"  -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        working-directory: ${{env.DIRECTORY}}
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ${{env.DIRECTORY}}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -var="alarm_email=$EMAIL" -var="prefix=$PREFIX" -var="ecrRepo=$ECR_REPO" -var="imageTag=$IMAGE_TAG"  -auto-approve